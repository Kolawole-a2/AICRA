[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aicra"
version = "1.0.0"
description = "AI Cyber Risk Advisor - Machine Learning-Based Cyber Risk Assessment"
authors = [{name = "AICRA Team", email = "team@aicra.org"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "numpy>=1.24",
    "pandas>=2.0",
    "scikit-learn>=1.3",
    "scipy>=1.11",
    "lightgbm>=4.0",
    "joblib>=1.3",
    "tqdm>=4.66",
    "matplotlib>=3.7",
    "orjson>=3.9",
    "torch>=2.2",
    "torchvision>=0.17",
    "networkx>=3.1",
    "requests>=2.31",
    "pydantic>=2.0",
    "pydantic-settings>=2.0",
    "typer>=0.9",
    "mlflow>=2.0",
    "evidently>=0.4",
    "thrember @ git+https://github.com/FutureComputing4AI/EMBER2024.git",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "ruff>=0.1",
    "mypy>=1.0",
    "pylint>=2.17",
    "pre-commit>=3.0",
    "pip-audit>=2.0",
    "pyupgrade>=3.0",
    "detect-secrets>=1.0",
]

[project.scripts]
aicra = "aicra.cli:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["aicra*"]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["aicra"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = "\\.(py|pyi)$"
exclude = "(\\.git|\\.venv|build|dist|__pycache__)"

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["aicra"]
skip = ["build", "dist", "__pycache__"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "lightgbm.*",
    "torch.*",
    "torchvision.*",
    "evidently.*",
    "mlflow.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=aicra",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=40",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["aicra"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
]

[tool.pylint.format]
max-line-length = 100